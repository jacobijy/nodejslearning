#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejslearning:server');
var http = require('http');
var mqtt = require('mqtt');
var mosca = require('mosca');
var config = require('../config');
var encrypt = require('../models/encrypt');

var MqttServer = new mosca.Server({
  port: 3010
});

MqttServer.on('clientConnected', function (client) {//监听连接
  console.log('client connected', client.id);
});
/**
* 监听MQTT主题消息
**/
MqttServer.on('published', function (packet, client) {//当客户端有连接发布主题消息
  var topic = packet.topic;
  console.log(packet);
  switch (topic) {
    case 'test':
      console.log('message-publish', packet.payload.toString());
      //MQTT转发主题消息
      MqttServer.publish({ topic: 'other', payload: 'sssss' });
      break;
    case 'other':
      console.log('message-123', packet.payload.toString());
      break;
  }
});

MqttServer.on('ready', function () {//当服务开启时
  console.log('mqtt is running...');
});
/**
 * Get port from environment and store in Express.
 */

console.log(process.env.PORT);
app.set('port', config.port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(config.port, config.host);
server.on('error', onError);
server.on('listening', onListening);

//scoket connection
var io = require('socket.io').listen(server.listen(config.port, config.host))
io.sockets.on('connection', function (socket) {
  console.log('User connected');
  socket.on('send', function (data) {
    var message_encoded = encrypt.aesEncrypt(data.message);
    data.message = message_encoded;
    if (io.sockets.connected[socket.id]) {
      io.sockets.connected[socket.id].emit('message', data);
    }
  });

  socket.on('disconnect', function (data) {
    console.log(data);
    console.log('User disconnected');
  })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof config.port === 'string'
    ? 'Pipe ' + config.port
    : 'Port ' + config.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log(addr);
}
